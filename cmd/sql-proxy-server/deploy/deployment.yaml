# secrets are created with the following command
# kubectl -n default create secret generic sql-proxy-server-tls --from-file=ca.pem=./ca_certificates.pem --from-file=key.pem=./cert_private_key.pem --from-file=cert.pem=./cert_public_key.pem
#
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sql-proxy-server
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: sql-proxy-server
  template:
    metadata:
      labels:
        app: sql-proxy-server
    spec:
      serviceAccountName: sql-proxy-server
      imagePullSecrets:
      - name: ps-gcr-credentials
      containers:
      - name: sql-proxy-server
        image: us.gcr.io/planetscale-dev/sql-proxy-server:latest
        args:
          - "-ca-file=/secrets/certs/ca.pem"
          - "-cert-file=/secrets/certs/cert.pem"
          - "-key-file=/secrets/certs/key.pem"
          - "-local-addr=0.0.0.0:3308"
        volumeMounts:
        - name: tls-certs
          mountPath: /secrets/certs
      volumes:
      - name: tls-certs
        secret:
          secretName: sql-proxy-server-tls

# ---

# apiVersion: v1
# kind: ServiceAccount
# metadata:
#   name: sql-proxy-server

# ---

# kind: Role
# apiVersion: rbac.authorization.k8s.io/v1
# metadata:
#   name: sql-proxy-server-role
# rules:
#   - apiGroups: [""]
#     resources: ["services"]
#     verbs: ["get", "list", "watch"]

# ---

# kind: RoleBinding
# apiVersion: rbac.authorization.k8s.io/v1
# metadata:
#   name: sql-proxy-server-binding
# subjects:
#   - kind: ServiceAccount
#     name: sql-proxy-server
#     namespace: kube-system
# roleRef:
#   kind: Role
#   name: sql-proxy-server-role
#   apiGroup: rbac.authorization.k8s.io
